2021-07-19 23:07:29.795522: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudart.so.11.0
2021-07-19 23:07:30.989018: I tensorflow/compiler/jit/xla_cpu_device.cc:41] Not creating XLA devices, tf_xla_enable_xla_devices not set
2021-07-19 23:07:30.989746: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcuda.so.1
2021-07-19 23:07:31.026026: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1720] Found device 0 with properties: 
pciBusID: 0000:65:00.0 name: GeForce RTX 2070 SUPER computeCapability: 7.5
coreClock: 1.77GHz coreCount: 40 deviceMemorySize: 7.79GiB deviceMemoryBandwidth: 417.29GiB/s
2021-07-19 23:07:31.026115: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudart.so.11.0
2021-07-19 23:07:31.028439: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcublas.so.11
2021-07-19 23:07:31.028568: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcublasLt.so.11
2021-07-19 23:07:31.029485: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcufft.so.10
2021-07-19 23:07:31.029771: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcurand.so.10
2021-07-19 23:07:31.031982: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcusolver.so.10
2021-07-19 23:07:31.032451: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcusparse.so.11
2021-07-19 23:07:31.032560: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudnn.so.8
2021-07-19 23:07:31.033786: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1862] Adding visible gpu devices: 0
2021-07-19 23:07:31.034098: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2021-07-19 23:07:31.034816: I tensorflow/compiler/jit/xla_gpu_device.cc:99] Not creating XLA devices, tf_xla_enable_xla_devices not set
2021-07-19 23:07:31.035322: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1720] Found device 0 with properties: 
pciBusID: 0000:65:00.0 name: GeForce RTX 2070 SUPER computeCapability: 7.5
coreClock: 1.77GHz coreCount: 40 deviceMemorySize: 7.79GiB deviceMemoryBandwidth: 417.29GiB/s
2021-07-19 23:07:31.035364: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudart.so.11.0
2021-07-19 23:07:31.035382: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcublas.so.11
2021-07-19 23:07:31.035392: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcublasLt.so.11
2021-07-19 23:07:31.035402: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcufft.so.10
2021-07-19 23:07:31.035412: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcurand.so.10
2021-07-19 23:07:31.035422: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcusolver.so.10
2021-07-19 23:07:31.035432: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcusparse.so.11
2021-07-19 23:07:31.035442: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudnn.so.8
2021-07-19 23:07:31.036111: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1862] Adding visible gpu devices: 0
2021-07-19 23:07:31.036149: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudart.so.11.0
2021-07-19 23:07:31.420395: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1261] Device interconnect StreamExecutor with strength 1 edge matrix:
2021-07-19 23:07:31.420443: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1267]      0 
2021-07-19 23:07:31.420450: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1280] 0:   N 
2021-07-19 23:07:31.421710: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1406] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 6987 MB memory) -> physical GPU (device: 0, name: GeForce RTX 2070 SUPER, pci bus id: 0000:65:00.0, compute capability: 7.5)
0it [00:00, ?it/s]Scanning labels /media/vbanna/DATA_SHARE/CV/datasets/COCO_raw/testing_records/labels.cache3 (200 found, 0 missing, 1 empty, 0 duplicate, for 201 images): 201it [00:00, 16608.65it/s]2021-07-19 23:07:31.932325: I tensorflow/compiler/jit/xla_cpu_device.cc:41] Not creating XLA devices, tf_xla_enable_xla_devices not set

WARNING:tensorflow:From /home/vbanna/.local/lib/python3.8/site-packages/tensorflow/python/keras/mixed_precision/loss_scale.py:56: DynamicLossScale.__init__ (from tensorflow.python.training.experimental.loss_scale) is deprecated and will be removed in a future version.
Instructions for updating:
Use tf.keras.mixed_precision.LossScaleOptimizer instead. LossScaleOptimizer now has all the functionality of DynamicLossScale
WARNING:tensorflow:From /home/vbanna/.local/lib/python3.8/site-packages/tensorflow/python/keras/mixed_precision/loss_scale.py:56: DynamicLossScale.__init__ (from tensorflow.python.training.experimental.loss_scale) is deprecated and will be removed in a future version.
Instructions for updating:
Use tf.keras.mixed_precision.LossScaleOptimizer instead. LossScaleOptimizer now has all the functionality of DynamicLossScale
2021-07-19 23:07:31.945494: W tensorflow/python/util/util.cc:348] Sets are not currently considered sequences, but this may change in the future, so consider avoiding using them.

!--PREPPING GPU--! 
1 Physical GPUs, 1 Logical GPUs
defaultdict(<class 'list'>, {'3': ['box_loss', 'class_loss', 'conf_loss', 'recall50', 'precision50', 'avg_iou', 'avg_obj'], '4': ['box_loss', 'class_loss', 'conf_loss', 'recall50', 'precision50', 'avg_iou', 'avg_obj'], '5': ['box_loss', 'class_loss', 'conf_loss', 'recall50', 'precision50', 'avg_iou', 'avg_obj'], 'global': ['total_loss', 'total_box', 'total_class', 'total_conf']})
[[12.0, 16.0], [19.0, 36.0], [40.0, 28.0], [36.0, 75.0], [76.0, 55.0], [72.0, 146.0], [142.0, 110.0], [192.0, 243.0], [459.0, 401.0]]
{'num_classes': 80, 'input_size': [640, 640, 3], 'min_level': 3, 'max_level': 5, 'boxes_per_scale': 3, 'base': {'type': None}, 'subdivisions': 1, 'filter': {'min_level': 3, 'max_level': 5, 'ignore_thresh': {'3': 0.7, '4': 0.7, '5': 0.7, 'all': None}, 'truth_thresh': {'3': 1.0, '4': 1.0, '5': 1.0, 'all': None}, 'loss_type': {'3': 'ciou', '4': 'ciou', '5': 'ciou', 'all': 'ciou'}, 'iou_normalizer': {'3': 0.75, '4': 0.75, '5': 0.75, 'all': 0.05}, 'cls_normalizer': {'3': 1.0, '4': 1.0, '5': 1.0, 'all': 0.5}, 'obj_normalizer': {'3': 4.0, '4': 1.0, '5': 0.4, 'all': None}, 'max_delta': {'3': inf, '4': inf, '5': inf, 'all': None}, 'new_cords': {'3': True, '4': True, '5': True, 'all': True}, 'scale_xy': {'3': 2.0, '4': 2.0, '5': 2.0, 'all': 2.0}, 'path_scales': {'3': 8, '4': 16, '5': 32}, 'objectness_smooth': {'3': 0.0, '4': 0.0, '5': 0.0, 'all': 1.0}, 'nms_type': 'greedy', 'iou_thresh': 0.001, 'nms_thresh': 0.6, 'max_boxes': 300, 'pre_nms_points': 5000, 'label_smoothing': 0.0, 'anchor_generation_scale': 512, 'use_scaled_loss': True, 'darknet': None}, 'norm_activation': {'activation': 'mish', 'use_sync_bn': True, 'norm_momentum': 0.97, 'norm_epsilon': 0.0001}, 'boxes': ['[12.0, 16.0]', '[19.0, 36.0]', '[40.0, 28.0]', '[36.0, 75.0]', '[76.0, 55.0]', '[72.0, 146.0]', '[142.0, 110.0]', '[192.0, 243.0]', '[459.0, 401.0]'], 'smart_bias': True}
InputSpec(shape=(None, 640, 640, 3), ndim=4)
<tensorflow.python.keras.regularizers.L2 object at 0x7f0f20c07f40>
Model: "altered_cspdarknet53"
__________________________________________________________________________________________________
Layer (type)                    Output Shape         Param #     Connected to                     
==================================================================================================
input_1 (InputLayer)            [(None, 640, 640, 3) 0                                            
__________________________________________________________________________________________________
ConvBN_0_0 (ConvBN)             (None, 640, 640, 32) 992         input_1[0][0]                    
__________________________________________________________________________________________________
DarkRes_1_residual_down (DarkRe (None, 320, 320, 64) 39552       ConvBN_0_0[0][0]                 
__________________________________________________________________________________________________
DarkRes_2_csp_down (CSPRoute)   ((None, 160, 160, 64 91136       DarkRes_1_residual_down[0][0]    
__________________________________________________________________________________________________
DarkRes_2_0 (DarkResidual)      (None, 160, 160, 64) 41472       DarkRes_2_csp_down[0][0]         
__________________________________________________________________________________________________
DarkRes_2_1 (DarkResidual)      (None, 160, 160, 64) 41472       DarkRes_2_0[0][0]                
__________________________________________________________________________________________________
DarkRes_2_csp_connect (CSPConne (None, 160, 160, 128 21248       DarkRes_2_1[0][0]                
                                                                 DarkRes_2_csp_down[0][1]         
__________________________________________________________________________________________________
DarkRes_3_csp_down (CSPRoute)   ((None, 80, 80, 128) 362496      DarkRes_2_csp_connect[0][0]      
__________________________________________________________________________________________________
DarkRes_3_0 (DarkResidual)      (None, 80, 80, 128)  164864      DarkRes_3_csp_down[0][0]         
__________________________________________________________________________________________________
DarkRes_3_1 (DarkResidual)      (None, 80, 80, 128)  164864      DarkRes_3_0[0][0]                
__________________________________________________________________________________________________
DarkRes_3_2 (DarkResidual)      (None, 80, 80, 128)  164864      DarkRes_3_1[0][0]                
__________________________________________________________________________________________________
DarkRes_3_3 (DarkResidual)      (None, 80, 80, 128)  164864      DarkRes_3_2[0][0]                
__________________________________________________________________________________________________
DarkRes_3_4 (DarkResidual)      (None, 80, 80, 128)  164864      DarkRes_3_3[0][0]                
__________________________________________________________________________________________________
DarkRes_3_5 (DarkResidual)      (None, 80, 80, 128)  164864      DarkRes_3_4[0][0]                
__________________________________________________________________________________________________
DarkRes_3_6 (DarkResidual)      (None, 80, 80, 128)  164864      DarkRes_3_5[0][0]                
__________________________________________________________________________________________________
DarkRes_3_7 (DarkResidual)      (None, 80, 80, 128)  164864      DarkRes_3_6[0][0]                
__________________________________________________________________________________________________
DarkRes_3_csp_connect (CSPConne (None, 80, 80, 256)  83456       DarkRes_3_7[0][0]                
                                                                 DarkRes_3_csp_down[0][1]         
__________________________________________________________________________________________________
DarkRes_4_csp_down (CSPRoute)   ((None, 40, 40, 256) 1445888     DarkRes_3_csp_connect[0][0]      
__________________________________________________________________________________________________
DarkRes_4_0 (DarkResidual)      (None, 40, 40, 256)  657408      DarkRes_4_csp_down[0][0]         
__________________________________________________________________________________________________
DarkRes_4_1 (DarkResidual)      (None, 40, 40, 256)  657408      DarkRes_4_0[0][0]                
__________________________________________________________________________________________________
DarkRes_4_2 (DarkResidual)      (None, 40, 40, 256)  657408      DarkRes_4_1[0][0]                
__________________________________________________________________________________________________
DarkRes_4_3 (DarkResidual)      (None, 40, 40, 256)  657408      DarkRes_4_2[0][0]                
__________________________________________________________________________________________________
DarkRes_4_4 (DarkResidual)      (None, 40, 40, 256)  657408      DarkRes_4_3[0][0]                
__________________________________________________________________________________________________
DarkRes_4_5 (DarkResidual)      (None, 40, 40, 256)  657408      DarkRes_4_4[0][0]                
__________________________________________________________________________________________________
DarkRes_4_6 (DarkResidual)      (None, 40, 40, 256)  657408      DarkRes_4_5[0][0]                
__________________________________________________________________________________________________
DarkRes_4_7 (DarkResidual)      (None, 40, 40, 256)  657408      DarkRes_4_6[0][0]                
__________________________________________________________________________________________________
DarkRes_4_csp_connect (CSPConne (None, 40, 40, 512)  330752      DarkRes_4_7[0][0]                
                                                                 DarkRes_4_csp_down[0][1]         
__________________________________________________________________________________________________
DarkRes_5_csp_down (CSPRoute)   ((None, 20, 20, 512) 5775360     DarkRes_4_csp_connect[0][0]      
__________________________________________________________________________________________________[[0 0 0 0 -15.0023775 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804]
 [0 0 0 0 -15.0023775 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804]
 [0 0 0 0 -15.0023775 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804]]
[[0 0 0 0 -16.3886719 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804]
 [0 0 0 0 -16.3886719 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804]
 [0 0 0 0 -16.3886719 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804]]
[[0 0 0 0 -17.7749672 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804]
 [0 0 0 0 -17.7749672 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804]
 [0 0 0 0 -17.7749672 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804 -4.8804]]

DarkRes_5_0 (DarkResidual)      (None, 20, 20, 512)  2625536     DarkRes_5_csp_down[0][0]         
__________________________________________________________________________________________________
DarkRes_5_1 (DarkResidual)      (None, 20, 20, 512)  2625536     DarkRes_5_0[0][0]                
__________________________________________________________________________________________________
DarkRes_5_2 (DarkResidual)      (None, 20, 20, 512)  2625536     DarkRes_5_1[0][0]                
__________________________________________________________________________________________________
DarkRes_5_3 (DarkResidual)      (None, 20, 20, 512)  2625536     DarkRes_5_2[0][0]                
__________________________________________________________________________________________________
DarkRes_5_csp_connect (CSPConne (None, 20, 20, 1024) 1316864     DarkRes_5_3[0][0]                
                                                                 DarkRes_5_csp_down[0][1]         
==================================================================================================
Total params: 26,631,008
Trainable params: 26,596,192
Non-trainable params: 34,816
__________________________________________________________________________________________________
{'embed_spp': False, 'use_fpn': True, 'max_level_process_len': None, 'csp_stack': 5, 'fpn_depth': 5, 'path_process_len': 6, 'activation': 'mish', 'subdivisions': 1, 'use_spatial_attention': False, 'use_sync_bn': True, 'norm_momentum': 0.97, 'norm_epsilon': 0.0001, 'kernel_regularizer': <tensorflow.python.keras.regularizers.L2 object at 0x7f0f20c07f40>}
[[12.0, 16.0], [19.0, 36.0], [40.0, 28.0], [36.0, 75.0], [76.0, 55.0], [72.0, 146.0], [142.0, 110.0], [192.0, 243.0], [459.0, 401.0]]
{'3': 1.0, '4': 1.0, '5': 1.0, 'all': None}
{'3': 1.0, '4': 1.0, '5': 1.0, 'all': None}
{'3': 'ciou', '4': 'ciou', '5': 'ciou', 'all': 'ciou'}
{'3': 'ciou', '4': 'ciou', '5': 'ciou', 'all': 'ciou'}
{'3': inf, '4': inf, '5': inf, 'all': None}
{'3': inf, '4': inf, '5': inf, 'all': None}
{'3': True, '4': True, '5': True, 'all': True}
{'3': True, '4': True, '5': True, 'all': True}
{'3': 0.75, '4': 0.75, '5': 0.75, 'all': 0.05}
{'3': 0.05, '4': 0.05, '5': 0.05, 'all': 0.05}
{'3': 1.0, '4': 1.0, '5': 1.0, 'all': 0.5}
{'3': 0.5, '4': 0.5, '5': 0.5, 'all': 0.5}
{'3': 4.0, '4': 1.0, '5': 0.4, 'all': None}
{'3': 4.0, '4': 1.0, '5': 0.4, 'all': None}
{'3': 0.7, '4': 0.7, '5': 0.7, 'all': None}
{'3': 0.7, '4': 0.7, '5': 0.7, 'all': None}
{'3': 0.0, '4': 0.0, '5': 0.0, 'all': 1.0}
{'3': 1.0, '4': 1.0, '5': 1.0, 'all': 1.0}
Model: "YoloDecoder"
__________________________________________________________________________________________________
Layer (type)                    Output Shape         Param #     Connected to                     
==================================================================================================
input_2 (InputLayer)            [(None, 80, 80, 256) 0                                            
__________________________________________________________________________________________________
input_3 (InputLayer)            [(None, 40, 40, 512) 0                                            
__________________________________________________________________________________________________
input_4 (InputLayer)            [(None, 20, 20, 1024 0                                            
__________________________________________________________________________________________________
yolo_fpn (YoloFPN)              {'5': (None, 20, 20, 9626112     input_2[0][0]                    
                                                                 input_3[0][0]                    
                                                                 input_4[0][0]                    
__________________________________________________________________________________________________
yolo_pan (YoloPAN)              {'3': (None, 80, 80, 16271360    yolo_fpn[0][0]                   
                                                                 yolo_fpn[0][1]                   
                                                                 yolo_fpn[0][2]                   
==================================================================================================
Total params: 25,897,472
Trainable params: 25,867,520
Non-trainable params: 29,952
__________________________________________________________________________________________________
Model: "yolo"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
altered_cspdarknet53 (Darkne OrderedDict([('3', (None, 26631008  
_________________________________________________________________
YoloDecoder (YoloDecoder)    {'3': (None, 80, 80, 256) 25897472  
_________________________________________________________________
yolo_layer (YoloLayer)       multiple                  0         
_________________________________________________________________
yolo_head (YoloHead)         multiple                  457725    
=================================================================
Total params: 52,986,205
Trainable params: 52,921,437
Non-trainable params: 64,768
_________________________________________________________________
64 seen
major: 0
minor: 2
revision: 5
iseen: 0
{'_type': 'net', 'batch': 64, 'subdivisions': 8, 'width': 512, 'height': 512, 'channels': 3, 'momentum': 0.949, 'decay': 0.0005, 'angle': 0, 'saturation': 1.5, 'exposure': 1.5, 'hue': 0.1, 'learning_rate': 0.00261, 'burn_in': 1000, 'max_batches': 500500, 'policy': 'steps', 'steps': (400000, 450000), 'scales': (0.1, 0.1), 'mosaic': 1}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 32, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 64, 'size': 3, 'stride': 2, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 32, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 64, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 3, 'stride': 2, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 64, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'route', 'layers': -2}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 64, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 64, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 64, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 64, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 64, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 64, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'route', 'layers': (-1, -10)}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 3, 'stride': 2, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'route', 'layers': -2}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'route', 'layers': (-1, -28)}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 3, 'stride': 2, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'route', 'layers': -2}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'route', 'layers': (-1, -28)}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 1024, 'size': 3, 'stride': 2, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'route', 'layers': -2}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 3, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'shortcut', 'from': -3, 'activation': 'linear'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'route', 'layers': (-1, -16)}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 1024, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'route', 'layers': -2}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'size': 3, 'stride': 1, 'pad': 1, 'filters': 512, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'maxpool', 'stride': 1, 'size': 5}
{'_type': 'route', 'layers': -2}
{'_type': 'maxpool', 'stride': 1, 'size': 9}
{'_type': 'route', 'layers': -4}
{'_type': 'maxpool', 'stride': 1, 'size': 13}
{'_type': 'route', 'layers': (-1, -3, -5, -6)}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'size': 3, 'stride': 1, 'pad': 1, 'filters': 512, 'activation': 'mish'}
{'_type': 'route', 'layers': (-1, -13)}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'upsample', 'stride': 2}
{'_type': 'route', 'layers': 79}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'route', 'layers': (-1, -3)}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'route', 'layers': -2}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'size': 3, 'stride': 1, 'pad': 1, 'filters': 256, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'size': 3, 'stride': 1, 'pad': 1, 'filters': 256, 'activation': 'mish'}
{'_type': 'route', 'layers': (-1, -6)}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'upsample', 'stride': 2}
{'_type': 'route', 'layers': 48}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'route', 'layers': (-1, -3)}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'route', 'layers': -2}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'size': 3, 'stride': 1, 'pad': 1, 'filters': 128, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'size': 3, 'stride': 1, 'pad': 1, 'filters': 128, 'activation': 'mish'}
{'_type': 'route', 'layers': (-1, -6)}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 128, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'size': 3, 'stride': 1, 'pad': 1, 'filters': 256, 'activation': 'mish'}
{'_type': 'convolutional', 'size': 1, 'stride': 1, 'pad': 1, 'filters': 255, 'activation': 'linear'}
{'_type': 'yolo', 'mask': (0, 1, 2), 'anchors': [(12, 16), (19, 36), (40, 28), (36, 75), (76, 55), (72, 146), (142, 110), (192, 243), (459, 401)], 'classes': 80, 'num': 9, 'jitter': 0.3, 'ignore_thresh': 0.7, 'truth_thresh': 1, 'random': 1, 'scale_x_y': 1.05, 'iou_thresh': 0.213, 'cls_normalizer': 1.0, 'iou_normalizer': 0.07, 'iou_loss': 'ciou', 'nms_kind': 'greedynms', 'beta_nms': 0.6}
{'_type': 'route', 'layers': -4}
{'_type': 'convolutional', 'batch_normalize': 1, 'size': 3, 'stride': 2, 'pad': 1, 'filters': 256, 'activation': 'mish'}
{'_type': 'route', 'layers': (-1, -20)}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'route', 'layers': -2}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'size': 3, 'stride': 1, 'pad': 1, 'filters': 256, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'size': 3, 'stride': 1, 'pad': 1, 'filters': 256, 'activation': 'mish'}
{'_type': 'route', 'layers': (-1, -6)}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 256, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'size': 3, 'stride': 1, 'pad': 1, 'filters': 512, 'activation': 'mish'}
{'_type': 'convolutional', 'size': 1, 'stride': 1, 'pad': 1, 'filters': 255, 'activation': 'linear'}
{'_type': 'yolo', 'mask': (3, 4, 5), 'anchors': [(12, 16), (19, 36), (40, 28), (36, 75), (76, 55), (72, 146), (142, 110), (192, 243), (459, 401)], 'classes': 80, 'num': 9, 'jitter': 0.3, 'ignore_thresh': 0.7, 'truth_thresh': 1, 'random': 1, 'scale_x_y': 1.05, 'iou_thresh': 0.213, 'cls_normalizer': 1.0, 'iou_normalizer': 0.07, 'iou_loss': 'ciou', 'nms_kind': 'greedynms', 'beta_nms': 0.6}
{'_type': 'route', 'layers': -4}
{'_type': 'convolutional', 'batch_normalize': 1, 'size': 3, 'stride': 2, 'pad': 1, 'filters': 512, 'activation': 'mish'}
{'_type': 'route', 'layers': (-1, -49)}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'route', 'layers': -2}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'size': 3, 'stride': 1, 'pad': 1, 'filters': 512, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'size': 3, 'stride': 1, 'pad': 1, 'filters': 512, 'activation': 'mish'}
{'_type': 'route', 'layers': (-1, -6)}
{'_type': 'convolutional', 'batch_normalize': 1, 'filters': 512, 'size': 1, 'stride': 1, 'pad': 1, 'activation': 'mish'}
{'_type': 'convolutional', 'batch_normalize': 1, 'size': 3, 'stride': 1, 'pad': 1, 'filters': 1024, 'activation': 'mish'}
{'_type': 'convolutional', 'size': 1, 'stride': 1, 'pad': 1, 'filters': 255, 'activation': 'linear'}
{'_type': 'yolo', 'mask': (6, 7, 8), 'anchors': [(12, 16), (19, 36), (40, 28), (36, 75), (76, 55), (72, 146), (142, 110), (192, 243), (459, 401)], 'classes': 80, 'num': 9, 'jitter': 0.3, 'ignore_thresh': 0.7, 'truth_thresh': 1, 'random': 1, 'scale_x_y': 1.05, 'iou_thresh': 0.213, 'cls_normalizer': 1.0, 'iou_normalizer': 0.07, 'iou_loss': 'ciou', 'nms_kind': 'greedynms', 'beta_nms': 0.6}
full net: 
512 512 3	convCFG(_type='convolutional', w=512, h=512, c=3, size=3, stride=1, pad=1, filters=32)
512 512 32	convCFG(_type='convolutional', w=512, h=512, c=32, size=3, stride=2, pad=1, filters=64)
256 256 64	convCFG(_type='convolutional', w=256, h=256, c=64, size=1, stride=1, pad=0, filters=32)
256 256 32	convCFG(_type='convolutional', w=256, h=256, c=32, size=3, stride=1, pad=1, filters=64)
256 256 64	shortcutCFG(_type='shortcut', w=256, h=256, c=64, _from=(-3,), activation='linear')
256 256 64	convCFG(_type='convolutional', w=256, h=256, c=64, size=3, stride=2, pad=1, filters=128)
128 128 128	convCFG(_type='convolutional', w=128, h=128, c=128, size=1, stride=1, pad=0, filters=64)
128 128 128	routeCFG(_type='route', w=128, h=128, c=128, layers=(-2,))
128 128 128	convCFG(_type='convolutional', w=128, h=128, c=128, size=1, stride=1, pad=0, filters=64)
128 128 64	convCFG(_type='convolutional', w=128, h=128, c=64, size=1, stride=1, pad=0, filters=64)
128 128 64	convCFG(_type='convolutional', w=128, h=128, c=64, size=3, stride=1, pad=1, filters=64)
128 128 64	shortcutCFG(_type='shortcut', w=128, h=128, c=64, _from=(-3,), activation='linear')
128 128 64	convCFG(_type='convolutional', w=128, h=128, c=64, size=1, stride=1, pad=0, filters=64)
128 128 64	convCFG(_type='convolutional', w=128, h=128, c=64, size=3, stride=1, pad=1, filters=64)
128 128 64	shortcutCFG(_type='shortcut', w=128, h=128, c=64, _from=(-3,), activation='linear')
128 128 64	convCFG(_type='convolutional', w=128, h=128, c=64, size=1, stride=1, pad=0, filters=64)
128 128 128	routeCFG(_type='route', w=128, h=128, c=128, layers=(-1, -10))
128 128 128	convCFG(_type='convolutional', w=128, h=128, c=128, size=1, stride=1, pad=0, filters=128)
128 128 128	convCFG(_type='convolutional', w=128, h=128, c=128, size=3, stride=2, pad=1, filters=256)
64 64 256	convCFG(_type='convolutional', w=64, h=64, c=256, size=1, stride=1, pad=0, filters=128)
64 64 256	routeCFG(_type='route', w=64, h=64, c=256, layers=(-2,))
64 64 256	convCFG(_type='convolutional', w=64, h=64, c=256, size=1, stride=1, pad=0, filters=128)
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=1, pad=1, filters=128)
64 64 128	shortcutCFG(_type='shortcut', w=64, h=64, c=128, _from=(-3,), activation='linear')
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=1, pad=1, filters=128)
64 64 128	shortcutCFG(_type='shortcut', w=64, h=64, c=128, _from=(-3,), activation='linear')
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=1, pad=1, filters=128)
64 64 128	shortcutCFG(_type='shortcut', w=64, h=64, c=128, _from=(-3,), activation='linear')
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=1, pad=1, filters=128)
64 64 128	shortcutCFG(_type='shortcut', w=64, h=64, c=128, _from=(-3,), activation='linear')
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=1, pad=1, filters=128)
64 64 128	shortcutCFG(_type='shortcut', w=64, h=64, c=128, _from=(-3,), activation='linear')
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=1, pad=1, filters=128)
64 64 128	shortcutCFG(_type='shortcut', w=64, h=64, c=128, _from=(-3,), activation='linear')
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=1, pad=1, filters=128)
64 64 128	shortcutCFG(_type='shortcut', w=64, h=64, c=128, _from=(-3,), activation='linear')
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=1, pad=1, filters=128)
64 64 128	shortcutCFG(_type='shortcut', w=64, h=64, c=128, _from=(-3,), activation='linear')
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
64 64 256	routeCFG(_type='route', w=64, h=64, c=256, layers=(-1, -28))
64 64 256	convCFG(_type='convolutional', w=64, h=64, c=256, size=1, stride=1, pad=0, filters=256)
64 64 256	convCFG(_type='convolutional', w=64, h=64, c=256, size=3, stride=2, pad=1, filters=512)
32 32 512	convCFG(_type='convolutional', w=32, h=32, c=512, size=1, stride=1, pad=0, filters=256)
32 32 512	routeCFG(_type='route', w=32, h=32, c=512, layers=(-2,))
32 32 512	convCFG(_type='convolutional', w=32, h=32, c=512, size=1, stride=1, pad=0, filters=256)
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
32 32 256	shortcutCFG(_type='shortcut', w=32, h=32, c=256, _from=(-3,), activation='linear')
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
32 32 256	shortcutCFG(_type='shortcut', w=32, h=32, c=256, _from=(-3,), activation='linear')
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
32 32 256	shortcutCFG(_type='shortcut', w=32, h=32, c=256, _from=(-3,), activation='linear')
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
32 32 256	shortcutCFG(_type='shortcut', w=32, h=32, c=256, _from=(-3,), activation='linear')
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
32 32 256	shortcutCFG(_type='shortcut', w=32, h=32, c=256, _from=(-3,), activation='linear')
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
32 32 256	shortcutCFG(_type='shortcut', w=32, h=32, c=256, _from=(-3,), activation='linear')
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
32 32 256	shortcutCFG(_type='shortcut', w=32, h=32, c=256, _from=(-3,), activation='linear')
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
32 32 256	shortcutCFG(_type='shortcut', w=32, h=32, c=256, _from=(-3,), activation='linear')
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
32 32 512	routeCFG(_type='route', w=32, h=32, c=512, layers=(-1, -28))
32 32 512	convCFG(_type='convolutional', w=32, h=32, c=512, size=1, stride=1, pad=0, filters=512)
32 32 512	convCFG(_type='convolutional', w=32, h=32, c=512, size=3, stride=2, pad=1, filters=1024)
16 16 1024	convCFG(_type='convolutional', w=16, h=16, c=1024, size=1, stride=1, pad=0, filters=512)
16 16 1024	routeCFG(_type='route', w=16, h=16, c=1024, layers=(-2,))
16 16 1024	convCFG(_type='convolutional', w=16, h=16, c=1024, size=1, stride=1, pad=0, filters=512)
16 16 512	convCFG(_type='convolutional', w=16, h=16, c=512, size=1, stride=1, pad=0, filters=512)
16 16 512	convCFG(_type='convolutional', w=16, h=16, c=512, size=3, stride=1, pad=1, filters=512)
16 16 512	shortcutCFG(_type='shortcut', w=16, h=16, c=512, _from=(-3,), activation='linear')
16 16 512	convCFG(_type='convolutional', w=16, h=16, c=512, size=1, stride=1, pad=0, filters=512)
16 16 512	convCFG(_type='convolutional', w=16, h=16, c=512, size=3, stride=1, pad=1, filters=512)
16 16 512	shortcutCFG(_type='shortcut', w=16, h=16, c=512, _from=(-3,), activation='linear')
16 16 512	convCFG(_type='convolutional', w=16, h=16, c=512, size=1, stride=1, pad=0, filters=512)
16 16 512	convCFG(_type='convolutional', w=16, h=16, c=512, size=3, stride=1, pad=1, filters=512)
16 16 512	shortcutCFG(_type='shortcut', w=16, h=16, c=512, _from=(-3,), activation='linear')
16 16 512	convCFG(_type='convolutional', w=16, h=16, c=512, size=1, stride=1, pad=0, filters=512)
16 16 512	convCFG(_type='convolutional', w=16, h=16, c=512, size=3, stride=1, pad=1, filters=512)
16 16 512	shortcutCFG(_type='shortcut', w=16, h=16, c=512, _from=(-3,), activation='linear')
16 16 512	convCFG(_type='convolutional', w=16, h=16, c=512, size=1, stride=1, pad=0, filters=512)
16 16 1024	routeCFG(_type='route', w=16, h=16, c=1024, layers=(-1, -16))
16 16 1024	convCFG(_type='convolutional', w=16, h=16, c=1024, size=1, stride=1, pad=0, filters=1024)
16 16 1024	convCFG(_type='convolutional', w=16, h=16, c=1024, size=1, stride=1, pad=0, filters=512)
16 16 1024	routeCFG(_type='route', w=16, h=16, c=1024, layers=(-2,))
16 16 1024	convCFG(_type='convolutional', w=16, h=16, c=1024, size=1, stride=1, pad=0, filters=512)
16 16 512	convCFG(_type='convolutional', w=16, h=16, c=512, size=3, stride=1, pad=1, filters=512)
16 16 512	convCFG(_type='convolutional', w=16, h=16, c=512, size=1, stride=1, pad=0, filters=512)
16 16 512	maxpoolCFG(_type='maxpool', w=16, h=16, c=512, stride=1, size=5)
16 16 512	routeCFG(_type='route', w=16, h=16, c=512, layers=(-2,))
16 16 512	maxpoolCFG(_type='maxpool', w=16, h=16, c=512, stride=1, size=9)
16 16 512	routeCFG(_type='route', w=16, h=16, c=512, layers=(-4,))
16 16 512	maxpoolCFG(_type='maxpool', w=16, h=16, c=512, stride=1, size=13)
16 16 2048	routeCFG(_type='route', w=16, h=16, c=2048, layers=(-1, -3, -5, -6))
16 16 2048	convCFG(_type='convolutional', w=16, h=16, c=2048, size=1, stride=1, pad=0, filters=512)
16 16 512	convCFG(_type='convolutional', w=16, h=16, c=512, size=3, stride=1, pad=1, filters=512)
16 16 1024	routeCFG(_type='route', w=16, h=16, c=1024, layers=(-1, -13))
16 16 1024	convCFG(_type='convolutional', w=16, h=16, c=1024, size=1, stride=1, pad=0, filters=512)
16 16 512	convCFG(_type='convolutional', w=16, h=16, c=512, size=1, stride=1, pad=0, filters=256)
16 16 256	upsampleCFG(_type='upsample', w=16, h=16, c=256, stride=2)
32 32 512	routeCFG(_type='route', w=32, h=32, c=512, layers=(79,))
32 32 512	convCFG(_type='convolutional', w=32, h=32, c=512, size=1, stride=1, pad=0, filters=256)
32 32 512	routeCFG(_type='route', w=32, h=32, c=512, layers=(-1, -3))
32 32 512	convCFG(_type='convolutional', w=32, h=32, c=512, size=1, stride=1, pad=0, filters=256)
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
32 32 256	routeCFG(_type='route', w=32, h=32, c=256, layers=(-2,))
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
32 32 512	routeCFG(_type='route', w=32, h=32, c=512, layers=(-1, -6))
32 32 512	convCFG(_type='convolutional', w=32, h=32, c=512, size=1, stride=1, pad=0, filters=256)
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=128)
32 32 128	upsampleCFG(_type='upsample', w=32, h=32, c=128, stride=2)
64 64 256	routeCFG(_type='route', w=64, h=64, c=256, layers=(48,))
64 64 256	convCFG(_type='convolutional', w=64, h=64, c=256, size=1, stride=1, pad=0, filters=128)
64 64 256	routeCFG(_type='route', w=64, h=64, c=256, layers=(-1, -3))
64 64 256	convCFG(_type='convolutional', w=64, h=64, c=256, size=1, stride=1, pad=0, filters=128)
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
64 64 128	routeCFG(_type='route', w=64, h=64, c=128, layers=(-2,))
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=1, pad=1, filters=128)
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=1, pad=1, filters=128)
64 64 256	routeCFG(_type='route', w=64, h=64, c=256, layers=(-1, -6))
64 64 256	convCFG(_type='convolutional', w=64, h=64, c=256, size=1, stride=1, pad=0, filters=128)
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=1, pad=1, filters=256)
64 64 256	convCFG(_type='convolutional', w=64, h=64, c=256, size=1, stride=1, pad=0, filters=255)
64 64 255	yoloCFG(_type='yolo', w=64, h=64, c=255, mask=(0, 1, 2), anchors=[(12, 16), (19, 36), (40, 28), (36, 75), (76, 55), (72, 146), (142, 110), (192, 243), (459, 401)], scale_x_y=1)
64 64 128	routeCFG(_type='route', w=64, h=64, c=128, layers=(-4,))
64 64 128	convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=2, pad=1, filters=256)
32 32 512	routeCFG(_type='route', w=32, h=32, c=512, layers=(-1, -20))
32 32 512	convCFG(_type='convolutional', w=32, h=32, c=512, size=1, stride=1, pad=0, filters=256)
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
32 32 256	routeCFG(_type='route', w=32, h=32, c=256, layers=(-2,))
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
32 32 512	routeCFG(_type='route', w=32, h=32, c=512, layers=(-1, -6))
32 32 512	convCFG(_type='convolutional', w=32, h=32, c=512, size=1, stride=1, pad=0, filters=256)
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=512)
32 32 512	convCFG(_type='convolutional', w=32, h=32, c=512, size=1, stride=1, pad=0, filters=255)
32 32 255	yoloCFG(_type='yolo', w=32, h=32, c=255, mask=(3, 4, 5), anchors=[(12, 16), (19, 36), (40, 28), (36, 75), (76, 55), (72, 146), (142, 110), (192, 243), (459, 401)], scale_x_y=1)
32 32 256	routeCFG(_type='route', w=32, h=32, c=256, layers=(-4,))
32 32 256	convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=2, pad=1, filters=512)
16 16 1024	routeCFG(_type='route', w=16, h=16, c=1024, layers=(-1, -49))
16 16 1024	convCFG(_type='convolutional', w=16, h=16, c=1024, size=1, stride=1, pad=0, filters=512)
16 16 512	convCFG(_type='convolutional', w=16, h=16, c=512, size=1, stride=1, pad=0, filters=512)
16 16 512	routeCFG(_type='route', w=16, h=16, c=512, layers=(-2,))
16 16 512	convCFG(_type='convolutional', w=16, h=16, c=512, size=1, stride=1, pad=0, filters=512)
16 16 512	convCFG(_type='convolutional', w=16, h=16, c=512, size=3, stride=1, pad=1, filters=512)
16 16 512	convCFG(_type='convolutional', w=16, h=16, c=512, size=1, stride=1, pad=0, filters=512)
16 16 512	convCFG(_type='convolutional', w=16, h=16, c=512, size=3, stride=1, pad=1, filters=512)
16 16 1024	routeCFG(_type='route', w=16, h=16, c=1024, layers=(-1, -6))
16 16 1024	convCFG(_type='convolutional', w=16, h=16, c=1024, size=1, stride=1, pad=0, filters=512)
16 16 512	convCFG(_type='convolutional', w=16, h=16, c=512, size=3, stride=1, pad=1, filters=1024)
16 16 1024	convCFG(_type='convolutional', w=16, h=16, c=1024, size=1, stride=1, pad=0, filters=255)
16 16 255	yoloCFG(_type='yolo', w=16, h=16, c=255, mask=(6, 7, 8), anchors=[(12, 16), (19, 36), (40, 28), (36, 75), (76, 55), (72, 146), (142, 110), (192, 243), (459, 401)], scale_x_y=1)
bytes_read: 211944840, original_size: 211944840, final_position: 211944840
ConvBN_0_0 convCFG(_type='convolutional', w=512, h=512, c=3, size=3, stride=1, pad=1, filters=32)
conv_bn convCFG(_type='convolutional', w=512, h=512, c=32, size=3, stride=2, pad=1, filters=64)
conv_bn_1 convCFG(_type='convolutional', w=256, h=256, c=64, size=1, stride=1, pad=0, filters=32)
conv_bn_2 convCFG(_type='convolutional', w=256, h=256, c=32, size=3, stride=1, pad=1, filters=64)
conv_bn convCFG(_type='convolutional', w=256, h=256, c=64, size=3, stride=2, pad=1, filters=128)
conv_bn_1 convCFG(_type='convolutional', w=128, h=128, c=128, size=1, stride=1, pad=0, filters=64)
conv_bn_2 convCFG(_type='convolutional', w=128, h=128, c=128, size=1, stride=1, pad=0, filters=64)
conv_bn convCFG(_type='convolutional', w=128, h=128, c=64, size=1, stride=1, pad=0, filters=64)
conv_bn_1 convCFG(_type='convolutional', w=128, h=128, c=64, size=3, stride=1, pad=1, filters=64)
conv_bn convCFG(_type='convolutional', w=128, h=128, c=64, size=1, stride=1, pad=0, filters=64)
conv_bn_1 convCFG(_type='convolutional', w=128, h=128, c=64, size=3, stride=1, pad=1, filters=64)
conv_bn convCFG(_type='convolutional', w=128, h=128, c=64, size=1, stride=1, pad=0, filters=64)
conv_bn_1 convCFG(_type='convolutional', w=128, h=128, c=128, size=1, stride=1, pad=0, filters=128)
conv_bn convCFG(_type='convolutional', w=128, h=128, c=128, size=3, stride=2, pad=1, filters=256)
conv_bn_1 convCFG(_type='convolutional', w=64, h=64, c=256, size=1, stride=1, pad=0, filters=128)
conv_bn_2 convCFG(_type='convolutional', w=64, h=64, c=256, size=1, stride=1, pad=0, filters=128)
conv_bn convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
conv_bn_1 convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=1, pad=1, filters=128)
conv_bn convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
conv_bn_1 convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=1, pad=1, filters=128)
conv_bn convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
conv_bn_1 convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=1, pad=1, filters=128)
conv_bn convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
conv_bn_1 convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=1, pad=1, filters=128)
conv_bn convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
conv_bn_1 convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=1, pad=1, filters=128)
conv_bn convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
conv_bn_1 convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=1, pad=1, filters=128)
conv_bn convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
conv_bn_1 convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=1, pad=1, filters=128)
conv_bn convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
conv_bn_1 convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=1, pad=1, filters=128)
conv_bn convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
conv_bn_1 convCFG(_type='convolutional', w=64, h=64, c=256, size=1, stride=1, pad=0, filters=256)
conv_bn convCFG(_type='convolutional', w=64, h=64, c=256, size=3, stride=2, pad=1, filters=512)
conv_bn_1 convCFG(_type='convolutional', w=32, h=32, c=512, size=1, stride=1, pad=0, filters=256)
conv_bn_2 convCFG(_type='convolutional', w=32, h=32, c=512, size=1, stride=1, pad=0, filters=256)
conv_bn convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
conv_bn_1 convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
conv_bn convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
conv_bn_1 convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
conv_bn convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
conv_bn_1 convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
conv_bn convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
conv_bn_1 convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
conv_bn convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
conv_bn_1 convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
conv_bn convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
conv_bn_1 convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
conv_bn convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
conv_bn_1 convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
conv_bn convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
conv_bn_1 convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
conv_bn convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
conv_bn_1 convCFG(_type='convolutional', w=32, h=32, c=512, size=1, stride=1, pad=0, filters=512)
conv_bn convCFG(_type='convolutional', w=32, h=32, c=512, size=3, stride=2, pad=1, filters=1024)
conv_bn_1 convCFG(_type='convolutional', w=16, h=16, c=1024, size=1, stride=1, pad=0, filters=512)
conv_bn_2 convCFG(_type='convolutional', w=16, h=16, c=1024, size=1, stride=1, pad=0, filters=512)
conv_bn convCFG(_type='convolutional', w=16, h=16, c=512, size=1, stride=1, pad=0, filters=512)
conv_bn_1 convCFG(_type='convolutional', w=16, h=16, c=512, size=3, stride=1, pad=1, filters=512)
conv_bn convCFG(_type='convolutional', w=16, h=16, c=512, size=1, stride=1, pad=0, filters=512)
conv_bn_1 convCFG(_type='convolutional', w=16, h=16, c=512, size=3, stride=1, pad=1, filters=512)
conv_bn convCFG(_type='convolutional', w=16, h=16, c=512, size=1, stride=1, pad=0, filters=512)
conv_bn_1 convCFG(_type='convolutional', w=16, h=16, c=512, size=3, stride=1, pad=1, filters=512)
conv_bn convCFG(_type='convolutional', w=16, h=16, c=512, size=1, stride=1, pad=0, filters=512)
conv_bn_1 convCFG(_type='convolutional', w=16, h=16, c=512, size=3, stride=1, pad=1, filters=512)
conv_bn convCFG(_type='convolutional', w=16, h=16, c=512, size=1, stride=1, pad=0, filters=512)
conv_bn_1 convCFG(_type='convolutional', w=16, h=16, c=1024, size=1, stride=1, pad=0, filters=1024)
private__identity_route
dark_route_process_1
<yolo.modeling.layers.nn_blocks.DarkRouteProcess object at 0x7f0f2081db50>
rout conv
rout conv
conv
conv
conv
conv
dark_route_process
<yolo.modeling.layers.nn_blocks.DarkRouteProcess object at 0x7f0f2081adf0>
rout conv
rout conv
conv
conv
conv
conv
conv
path_aggregation_block_1
<yolo.modeling.layers.nn_blocks.PathAggregationBlock object at 0x7f0f2081de50>
path conv
path conv
path conv
path_aggregation_block
<yolo.modeling.layers.nn_blocks.PathAggregationBlock object at 0x7f0f2081d850>
path conv
path conv
path conv
csp_route_1
conv_bn_10
conv_bn_11
conv_bn_12
csp_connect_1
conv_bn_13
conv_bn_14
conv_bn_15
conv2d_10
sync_batch_normalization_10
conv2d_11
sync_batch_normalization_11
conv2d_12
sync_batch_normalization_12
conv2d_13
sync_batch_normalization_13
conv2d_14
sync_batch_normalization_14
concatenate_3
conv2d_15
sync_batch_normalization_15
csp_route
conv_bn
conv_bn_1
spp
conv_bn_2
conv_bn_3
csp_connect
conv_bn_4
conv_bn_5
conv_bn_6
conv2d
sync_batch_normalization
conv2d_1
sync_batch_normalization_1
conv2d_2
sync_batch_normalization_2
conv2d_3
sync_batch_normalization_3
max_pooling2d
max_pooling2d_1
max_pooling2d_2
conv2d_4
sync_batch_normalization_4
conv2d_5
sync_batch_normalization_5
concatenate_1
conv2d_6
sync_batch_normalization_6
concatenate_4
conv_bn_16
conv_bn_17
conv_bn_18
conv2d_16
sync_batch_normalization_16
conv2d_17
sync_batch_normalization_17
conv2d_18
sync_batch_normalization_18
concatenate_2
conv_bn_7
conv_bn_8
conv_bn_9
conv2d_7
sync_batch_normalization_7
conv2d_8
sync_batch_normalization_8
conv2d_9
sync_batch_normalization_9
19 44
conv_bn_5 512.0 (1, 1) convCFG(_type='convolutional', w=16, h=16, c=1024, size=1, stride=1, pad=0, filters=512)
conv_bn_6 512.0 (1, 1) convCFG(_type='convolutional', w=16, h=16, c=1024, size=1, stride=1, pad=0, filters=512)
conv_bn 512.0 (3, 3) convCFG(_type='convolutional', w=16, h=16, c=512, size=3, stride=1, pad=1, filters=512)
conv_bn_1 512.0 (1, 1) convCFG(_type='convolutional', w=16, h=16, c=512, size=1, stride=1, pad=0, filters=512)
conv_bn_2 512.0 (1, 1) convCFG(_type='convolutional', w=16, h=16, c=2048, size=1, stride=1, pad=0, filters=512)
conv_bn_3 512.0 (3, 3) convCFG(_type='convolutional', w=16, h=16, c=512, size=3, stride=1, pad=1, filters=512)
conv_bn_4 512.0 (1, 1) convCFG(_type='convolutional', w=16, h=16, c=1024, size=1, stride=1, pad=0, filters=512)
conv_bn_7 256.0 (1, 1) convCFG(_type='convolutional', w=16, h=16, c=512, size=1, stride=1, pad=0, filters=256)
conv_bn_8 256.0 (1, 1) convCFG(_type='convolutional', w=32, h=32, c=512, size=1, stride=1, pad=0, filters=256)
conv_bn_9 256.0 (1, 1) convCFG(_type='convolutional', w=32, h=32, c=512, size=1, stride=1, pad=0, filters=256)
conv_bn_14 256.0 (1, 1) convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
conv_bn_15 256.0 (1, 1) convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)WARNING:tensorflow:tf.keras.mixed_precision.experimental.LossScaleOptimizer is deprecated. Please use tf.keras.mixed_precision.LossScaleOptimizer instead. For example
  opt = tf.keras.mixed_precision.experimental.LossScaleOptimizer(opt)
WARNING:tensorflow:tf.keras.mixed_precision.experimental.LossScaleOptimizer is deprecated. Please use tf.keras.mixed_precision.LossScaleOptimizer instead. For example
  opt = tf.keras.mixed_precision.experimental.LossScaleOptimizer(opt)
2021-07-19 23:07:36.916979: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:116] None of the MLIR optimization passes are enabled (registered 2)
2021-07-19 23:07:36.936138: I tensorflow/core/platform/profile_utils/cpu_utils.cc:112] CPU Frequency: 3499910000 Hz
2021-07-19 23:07:37.113957: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudnn.so.8
2021-07-19 23:07:38.273488: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcublas.so.11
2021-07-19 23:07:38.633883: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcublasLt.so.11
0
15
24
101919 0.0166529939 0.0101208948 0.0320856534 0.0188202187 0.0610267669
30
60
45
106172 0.049374707 0.0553390905 0.142529875 0.04412679 0.241995767
12
48
54
106344 0.0286874399 0.0712940767 0.131992877 0.0563416816 0.259628654
6
18
9
109537 0.281783432 0.0162580628 0.0178344529 0.00140653201 0.0354990475
15
36
42
111878 0.0247461516 0.0637149736 0.0777859837 0.108900636 0.250401586
0
3
15
113579 0.138413131 0.0150030144 0.0116794258 0.0729469731 0.0996294171
60
141
105
113720 0.0168496668 0.0396135896 0.174171343 0.0591309667 0.2729159
3
30
51
116095 0.0215200167 0.0285415091 0.0532478243 0.165254489 0.247043818
6
30
36
116261 0.015688736 0.0287170596 0.0366757177 0.0459700599 0.11136283
0
0
6
117441 0.324338734 0.00640731677 0.0256937798 0.0444562882 0.0765573829
6
21
18
118921 0.175967336 0.0597096458 0.0294147898 0.00104983302 0.0901742652
0
0
18
120398 0.0882004723 0.0164588 0.0307152569 0.0224799607 0.0696540177
39
66
51
122588 0.0292479321 0.0562680587 0.163310096 0.0948361 0.314414263
6
39
51
124429 0.0179433525 0.0520227514 0.113913365 0.0973577052 0.263293803
0
0
9
126345 0.0762725472 0.00480046403 0.0146425785 0.0420791619 0.0615222044
141
219
84
12897 0.0347033329 0.0599393472 0.25879842 0.0499093831 0.368647158
48
27
6
129159 0.159582958 0.0334931239 0.037109673 0.0157197677 0.0863225609
24
27
18
134558 0.0470850095 0.0526045933 0.0423121713 0.0230946094 0.11801137
12
66
57
135410 0.0151805962 0.0414636731 0.0814724416 0.0281480122 0.151084125
63
93
69
142620 0.0530617908 0.0360967778 0.114149988 0.0216931403 0.171939909
3
24
21
14265 0.133764207 0.014708058 0.01810004 0.00312130479 0.0359294
6
15
15
155192 0.0656393543 0.0278144628 0.0150251985 0.00757543603 0.0504151
168
126
36
155885 0.0252867602 0.0753560141 0.303788811 0.0860221684 0.465167
0
0
9
15746 0.165485114 0.00367614487 0.00962448865 0.0275588501 0.0408594795
6
33
36
160260 0.0291818976 0.042317342 0.0808378607 0.109535187 0.232690394
3
9
3
16241 2.57344174 0.0278987922 0.0164893325 0.117640048 0.162028164
48
60
60
168491 0.0149793066 0.07160905 0.149381578 0.0463781767 0.267368793
45
48
30
170127 0.0347673818 0.0452356637 0.0700201 0.028871011 0.144126773
45
96
60
172595 0.0672818422 0.0414260291 0.144396394 0.0789869 0.26480931
0
0
9
173235 0.0182867628 0.0101271421 0.0213664584 0.0360446 0.0675382
9
18
12
1779 0.0976784378 0.0388844833 0.0296736024 0.097771883 0.16632998
0
0
6
179273 0.12936461 0.0296312775 0.0193280037 0.0578211956 0.106780477
0
6
24
180366 0.0293860957 0.0356121585 0.0275060423 0.0484322421 0.111550435
18
12
6
18149 0.067628324 0.066274628 0.0240119491 0.0466942862 0.136980861
24
24
9
184205 0.504539609 0.0183053296 0.0403531715 0.0326222554 0.0912807584
30
27
3
192291 0.659910083 0.0489165857 0.0302449577 0.0348389745 0.114000514
36
54
42
192406 0.0175757296 0.0491071977 0.100884452 0.0209922679 0.170983925
45
45
24
197279 0.181420445 0.0297849067 0.0383298285 0.00359079544 0.0717055276
3
9
3
205531 1.35241532 0.0288004652 0.0125491824 0.0242489539 0.0655986071
0
3
18
209728 0.142475545 0.0115260687 0.0140478248 0.0986146256 0.124188513
72
93
45
212112 0.0270782635 0.0334576704 0.0911612958 0.0433949605 0.16801393
0
12
21
212198 0.0951672196 0.0165132564 0.0244085919 0.00500952639 0.0459313728
6
6
21
212605 0.0703974217 0.0786236823 0.0572823435 0.13206166 0.267967671
0
0
15
213795 0.0383213609 0.0331083 0.0260696281 0.0299015567 0.0890794843
9
36
30
220819 0.0390944816 0.0184542462 0.0649358258 0.120603211 0.203993291
0
3
21
223241 0.0552835241 0.0728737563 0.0247058384 0.0527079701 0.150287569
93
102
30
223426 0.036003992 0.0722876 0.128981411 0.0822969377 0.283565938
57
24
9
224554 0.00975775719 0.0551611558 0.0430296212 0.0242573656 0.122448146
0
18
39
224557 0.0341535062 0.0144376531 0.0377019346 0.0316323191 0.0837719068
0
15
24
224907 0.193584234 0.0211815238 0.0508651063 0.0608790815 0.132925704
72
36
18
226097 0.161138237 0.0473197326 0.0503083393 0.0714043081 0.16903238
102
141
69
227031 0.0169262029 0.061165452 0.140873775 0.0330689177 0.235108137
15
60
33
231325 0.0537017062 0.0478686728 0.0826549903 0.042444028 0.172967702
0
9
15
232453 0.0496166199 0.0198073089 0.0328706056 0.0233941935 0.0760721117
12
18
6
233140 0.332107723 0.0292878 0.0245480388 0.0483028926 0.102138728
3
18
21
234807 0.126467615 0.0115439203 0.00896875933 0.0164123513 0.0369250327
0
9
12
237316 0.201686561 0.0205028616 0.0207329802 0.00169117737 0.0429270156
72
114
57
237324 0.0220259652 0.0637910813 0.110067375 0.0452251211 0.219083577
3
9
24
238147 0.0351066887 0.0541840941 0.0381187387 0.161089391 0.25339222
12
78
54
239148 0.0321096182 0.0633217394 0.0916865468 0.0998723134 0.254880607
24
6
9
242868 0.110745 0.0402181149 0.0320273116 0.0789374486 0.15118289
6
27
21
245049 0.161466315 0.0162198432 0.0152815189 0.0018278904 0.0333292522
135
123
60
246014 0.016607374 0.0653035045 0.209053874 0.0431913212 0.317548692
36
63
36
246061 0.0451350287 0.0390939265 0.0522449799 0.00900884159 0.10034775
120
48
3
25034 0.0439503416 0.0852949619 0.0572564416 0.0372114852 0.1797629
33
21
9
250571 0.963967681 0.0569687374 0.0268004239 0.0723753497 0.156144515
0
6
12
250594 0.0550934747 0.0191812 0.00989401434 0.00197628769 0.0310515
0
9
12
252696 0.180212319 0.0306277368 0.0245161429 0.0117769837 0.0669208616
0
18
18
253718 0.024471093 0.0680332184 0.0365369469 0.0768842399 0.18145442
27
60
45
253770 0.0292275101 0.0372789912 0.0797573179 0.0137172481 0.130753547
78
60
15
254711 0.129160538 0.0391178764 0.0421566963 0.0159269199 0.0972014889
0
0
9
255974 0.199889556 0.00241914182 0.00810005888 0.0324682184 0.0429874137
14
30
33
258346 0.0472641 0.0526650697 0.0497822948 0.042608317 0.145055681
30
33
24
259335 0.0458450206 0.0370516777 0.0346903317 0.03278891 0.104530923
93
39
3
259452 0.812928736 0.0455372445 0.0520141125 0.00658595841 0.104137316
0
0
6
259614 0.227489278 0.006739059 0.0130050965 0.0422178842 0.0619620383
0
9
9
260020 0.406003714 0.00343870488 0.025226092 0.000900802494 0.0295655988
6
30
42
264654 0.0302248355 0.0649547055 0.0748416483 0.0425619856 0.182358339
15
60
69
265916 0.0219094492 0.0425088294 0.105956182 0.0315828547 0.18004787
57
48
6
274708 1.22068644 0.0314063765 0.030636875 0.00272584101 0.0647690892
3
18
9
275058 0.0479542911 0.0560480729 0.0326938145 0.0604563355 0.149198219
0
12
33
276146 0.0927752703 0.00792613067 0.0341925845 0.00383119378 0.0459499061
55
156
117
27642 0.0108658858 0.0429019146 0.191864163 0.0440009 0.278767
12
18
6
283441 0.262986928 0.0299127251 0.043871671 0.0480568558 0.121841244
24
36
18
293175 0.0373755507 0.0394617543 0.0723536685 0.0735987127 0.185414135
9
18
21
294908 0.157360673 0.0374089852 0.0259199627 0.00669759791 0.0700265467
0
0
15
296383 0.197410181 0.0140215708 0.0200413056 0.0503879413 0.0844508111
9
21
15
296759 0.157017007 0.0442361869 0.0505699292 0.0309196021 0.125725716
3
9
3
298137 3.00698328 0.0220685787 0.0237404965 0.0396634154 0.0854724869
0
0
24
30290 0.053396292 0.0217483956 0.0157078989 0.0157617982 0.0532180928
72
138
66
304404 0.0263388213 0.0339519829 0.136879101 0.0161239579 0.186955065
12
21
18
30465 0.0997560322 0.0200635456 0.0233884118 0.00226841029 0.0457203649
33
78
63
305609 0.0232651196 0.0521588847 0.161549583 0.0840080455 0.297716498
0
9
24
306395 0.101553887 0.0096612107 0.0139037101 0.00362336822 0.0271882899
0
9
9
316000 0.315256655 0.0195207987 0.015696086 0.00156462006 0.0367815048
36
0
3
31601 1.2729075 0.0461718701 0.0244882945 0.0335633233 0.10422349
0
0
0
317130 0.00056070165 0 0.0162010435 0 0.0162010435
18
63
54
318219 0.0279836 0.0774905384 0.131378174 0.125606775 0.334475517
15
33
27
319830 0.0702525377 0.0442710668 0.0470601469 0.0615220107 0.152853221
9
9
3
320370 0.30117476 0.0248487219 0.0124973934 0.0117331743 0.0490792915
0
15
39
322503 0.0427087285 0.0236750506 0.0777132809 0.0686956644 0.170083985
6
27
27
322848 0.0405541174 0.0262384079 0.0409373716 0.0441289321 0.111304708
0
0
15
33372 0.135595128 0.0170437749 0.0192412362 0.0258853 0.0621703118
36
60
33
334371 0.0207567643 0.0419445857 0.0722959414 0.0360194668 0.15026
0
6
9
337065 0.109428354 0.0192316975 0.0332158282 0.081435293 0.133882821
9
42
51
344548 0.0457489155 0.0202724319 0.0487579629 0.00908889249 0.0781192929
369
260
36
353409 0.0231683664 0.0775992 0.367501438 0.0760486647 0.521149278
3
6
12
354729 0.477333516 0.0193489231 0.0306695476 0.0344259068 0.0844443738
99
87
30
355441 0.131820202 0.0257349405 0.0604509152 0.0034106418 0.089596495
48
45
18
36053 0.188057452 0.0369092 0.0699159727 0.0502712689 0.157096446
93
12
6
365485 1.04432392 0.0576640628 0.0678011179 0.0547329336 0.180198103
0
6
18
369667 0.0530141145 0.0164946131 0.0232254136 0.0624056272 0.10212566
12
63
33
372819 0.0663624257 0.0371605307 0.043003317 0.0893325955 0.169496447
0
12
24
375376 0.0702016577 0.0103009827 0.0145505443 0.0781940073 0.103045531
0
0
9
377738 0.0738709494 0.0342083797 0.0243751965 0.0322681665 0.0908517465
0
0
9
378859 0.19207418 0.00465943618 0.0104003698 0.0013117725 0.016371578
126
153
60
381608 0.00911876746 0.0611818656 0.228272527 0.0620085225 0.35146293
9
9
12
38721 0.128960833 0.0273724645 0.0218378231 0.0176853593 0.0668956488
0
9
15
388464 0.217712313 0.0133129135 0.0162556376 0.000884147943 0.0304527
72
63
27
389753 0.0534182414 0.0667693093 0.0883732662 0.0626636073 0.21780619
12
33
48
394050 0.0131737897 0.0446343571 0.0946848765 0.038983494 0.17830272
30
114
93
394334 0.0201105289 0.0377933085 0.162338883 0.101402879 0.30153507
27
69
57
395904 0.031868998 0.0321472511 0.0889660716 0.0361648574 0.15727818
120
36
15
402248 0.0396035165 0.0464943647 0.0776511878 0.0262815524 0.150427103
24
78
93
403995 0.0197033361 0.0554926023 0.172894061 0.0358103067 0.264196962
21
69
30
405882 0.048353821 0.0639680326 0.0532355793 0.0557648912 0.172968507
9
18
9
406744 0.0891619325 0.0645087957 0.0209638085 0.196717098 0.282189697
3
24
30
408859 0.028403867 0.0414208546 0.065679431 0.111275516 0.218375802
0
0
15
415823 0.198680192 0.00472820643 0.0152199268 0.0377372652 0.0576853976
0
6
9
423396 0.252991289 0.0251997262 0.0140384641 0.000800168084 0.0400383547
18
30
33
432213 0.0448279455 0.0274232738 0.0577715226 0.0460279211 0.13122271
0
0
18
432906 0.0586438254 0.0247324575 0.0351958163 0.0321422815 0.0920705497
0
0
6
436280 0.275753 0.0104176691 0.00992090348 0.0393689238 0.0597074963
0
0
15
443818 0.122862086 0.0102286972 0.0176963583 0.0385522731 0.0664773285
72
60
66
457877 0.0151054356 0.0854880214 0.142553747 0.0706496 0.298691392
3
9
15
459304 0.047066085 0.0296143815 0.0233008079 0.00124912406 0.0541643128
3
3
15
459887 0.126222908 0.0382020101 0.0414760932 0.176350057 0.256028175
0
21
60
460866 0.0180482101 0.0495801941 0.0764653459 0.0999724567 0.226017982
153
153
45
462565 0.0328054503 0.0509626493 0.101030864 0.0287078805 0.18070139
3
24
28
463611 0.0710255057 0.0237494372 0.0404797308 0.0877027884 0.151931956
0
12
21
464018 0.0399208665 0.0232553445 0.0491214842 0.066400446 0.138777271
27
33
21
466346 0.0556282513 0.041775804 0.0545143858 0.0162651688 0.112555355
9
12
9
467468 0.433347881 0.0284497123 0.0200192519 0.0206075832 0.069076553
132
96
51
46847 0.0236204434 0.0802714527 0.203173831 0.0863565356 0.36980179
3
9
9
473121 0.0192746166 0.0252920613 0.00998312049 0.00456614327 0.0398413241
0
33
36
474881 0.132615477 0.0125119947 0.0318914 0.0588600188 0.103263415
96
120
45
475182 0.0106871352 0.0786511302 0.198204473 0.0467844717 0.323640108
0
9
6
475856 0.067042 0.00776770711 0.0136299059 0.00102839456 0.0224260073
96
84
6
479075 0.333437204 0.0273956768 0.0678544939 0.065186739 0.160436898
129
93
18
48133 0.045082286 0.064173013 0.136774972 0.0488880202 0.249836
33
96
63
483446 0.0231116302 0.0367767289 0.106753975 0.061711587 0.205242291
12
18
6
485773 0.853546321 0.0221219305 0.0120584182 0.00226565031 0.036446
3
9
12
486162 0.0905418694 0.0556021407 0.0524862707 0.14032726 0.248415664
0
0
15
488743 0.0324938335 0.0207290426 0.013653419 0.0462746 0.08065705
0
12
15
491294 0.0880274549 0.0251349285 0.0406643227 0.0644273 0.130226552
3
9
12
494555 0.106124513 0.0327522717 0.0180654116 0.0080951415 0.0589128248
15
36
30
494846 0.0413686335 0.0384745747 0.0633897409 0.0382586 0.14012292
15
36
18
499727 0.412555218 0.0287682377 0.0283926334 0.119429074 0.176589936
0
6
24
502644 0.0694069266 0.0147892078 0.0264869891 0.032390736 0.0736669302
0
0
15
512938 0.0510476753 0.0119975191 0.0273559429 0.0586895533 0.0980430171
51
90
78
517399 0.0366031453 0.0349822938 0.0990359634 0.0547194518 0.18873772
27
84
72
520124 0.0219027624 0.0413266346 0.109228045 0.0359024405 0.186457112
9
6
9
52017 0.0300007295 0.0745991319 0.018435277 0.0877993852 0.180833787
12
6
15
520324 0.0341333635 0.0620419234 0.0473171547 0.013432093 0.122791171
30
56
68
522665 0.0191583037 0.0626597106 0.136798084 0.0762621313 0.275719911
6
9
6
530998 0.192442328 0.0109914 0.00568712 0.000829488621 0.0175080094
102
117
39
531697 0.0665360391 0.0432284661 0.150635898 0.0493787304 0.243243098
66
54
24
536201 0.0959893242 0.0362022221 0.0405690446 0.00466423295 0.0814355
36
69
42
53668 0.0536361113 0.020687446 0.0341084749 0.0139119532 0.0687078759
0
3
18
537907 0.0313282609 0.073950693 0.0187925361 0.0771801695 0.16992338
3
21
18
540642 0.114503883 0.0334096365 0.0265429392 0.0405099243 0.100462496
6
9
3
541435 1.35440207 0.0108617451 0.0128139826 0.00244300673 0.026118733
0
3
15
542388 0.0365569293 0.0618682206 0.0424235128 0.0482895672 0.152581304
0
30
42
547759 0.0520861186 0.0177385285 0.0347785801 0.0415348634 0.094051972
0
3
6
552656 0.0529911891 0.00683820574 0.00634118123 0.0596621111 0.0728414953
0
9
15
556966 0.0521352403 0.0357593596 0.0248216949 0.036748264 0.0973293185
0
3
18
559955 0.0528069101 0.0637925863 0.0245474614 0.0763729364 0.164713
6
81
84
563882 0.00826508924 0.0448959544 0.121535502 0.0290477686 0.195479229
0
15
36
564659 0.0622210838 0.00658725 0.032558687 0.0688189417 0.107964888
78
102
54
566975 0.0902904 0.0526447184 0.128999218 0.0780132115 0.259657145
9
36
30
572802 0.0497038253 0.0327264071 0.0365835 0.0274693593 0.096779272
3
21
42
573206 0.0474435315 0.0414944068 0.0589210615 0.0377814621 0.138196945
0
3
15
574411 0.10452348 0.0464514643 0.0163499974 0.040384762 0.10318622
0
0
9
575032 0.0359122641 0.00103178585 0.0138307773 0.000868958537 0.015731521
150
222
99
579070 0.00954158418 0.0477804765 0.353788227 0.0522660166 0.453834772
93
126
33
580720 0.0248343162 0.0680222809 0.151858047 0.0690547675 0.288935095
0
18
15
65231 0.12946339 0.0448984429 0.0153557435 0.0122983493 0.0725525394
120
75
15
65798 0.051074408 0.0668425113 0.131389946 0.0224722661 0.220704705
99
74
39
69670 0.0197698791 0.0401557535 0.0760632753 0.0261968 0.142415822
0
9
15
69959 0.17449379 0.00570547488 0.018626444 0.0273113921 0.051643312
93
96
87
70478 0.0196260884 0.0623050481 0.110646516 0.0318500325 0.204801589
0
0
6
75162 0.132032961 0.00283951964 0.0115914959 0.00692050764 0.0213515237
6
15
40
79113 0.0528289266 0.0293968767 0.0658129156 0.0302676521 0.125477448
0
9
15
80671 0.0429251418 0.0337149 0.0231262222 0.0317670144 0.0886081457
6
15
21
80949 0.0444722697 0.0315911695 0.0385877341 0.119934149 0.190113053
0
3
24
83658 0.0467009544 0.0173846651 0.0257933848 0.0740636513 0.117241696
0
0
9
85292 0.117566526 0.00835218746 0.0169891249 0.0160613097 0.0414026193
102
48
9
8775 0.169175714 0.0597658 0.0653043687 0.0284245424 0.153494716
0
9
27
92768 0.0758673847 0.0128091276 0.0268859584 0.024019951 0.0637150407
24
51
27
93140 0.061855875 0.02548673 0.0644193515 0.0508815721 0.140787661
6
18
12
96625 0.0995153338 0.0331272148 0.0192449819 0.0280821305 0.0804543197

conv_bn_10 256.0 (3, 3) convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
conv_bn_11 256.0 (1, 1) convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
conv_bn_12 256.0 (3, 3) convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
conv_bn_13 256.0 (1, 1) convCFG(_type='convolutional', w=32, h=32, c=512, size=1, stride=1, pad=0, filters=256)
conv_bn_16 128.0 (1, 1) convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=128)
conv_bn_17 128.0 (1, 1) convCFG(_type='convolutional', w=64, h=64, c=256, size=1, stride=1, pad=0, filters=128)
conv_bn_18 128.0 (1, 1) convCFG(_type='convolutional', w=64, h=64, c=256, size=1, stride=1, pad=0, filters=128)
dark_route_process
<yolo.modeling.layers.nn_blocks.DarkRouteProcess object at 0x7f0f20606160>
rout conv
rout conv
conv
conv
conv
conv
conv
dark_route_process_1
<yolo.modeling.layers.nn_blocks.DarkRouteProcess object at 0x7f0f20a29bb0>
rout conv
rout conv
conv
conv
conv
conv
conv
dark_route_process_2
<yolo.modeling.layers.nn_blocks.DarkRouteProcess object at 0x7f0f2090fa00>
rout conv
rout conv
conv
conv
conv
conv
conv
path_aggregation_block
<yolo.modeling.layers.nn_blocks.PathAggregationBlock object at 0x7f0f209ce340>
path conv
path conv
path_aggregation_block_1
<yolo.modeling.layers.nn_blocks.PathAggregationBlock object at 0x7f0f20577d90>
path conv
path conv
csp_route
conv_bn
conv_bn_1
conv_bn_2
csp_connect
conv_bn_3
conv_bn_4
conv_bn_5
conv_bn_6
conv2d
sync_batch_normalization
conv2d_1
sync_batch_normalization_1
conv2d_2
sync_batch_normalization_2
conv2d_3
sync_batch_normalization_3
conv2d_4
sync_batch_normalization_4
concatenate
conv2d_5
sync_batch_normalization_5
conv2d_6
sync_batch_normalization_6
csp_route_1
conv_bn_9
conv_bn_10
conv_bn_11
csp_connect_1
conv_bn_12
conv_bn_13
conv_bn_14
conv_bn_15
conv2d_9
sync_batch_normalization_9
conv2d_10
sync_batch_normalization_10
conv2d_11
sync_batch_normalization_11
conv2d_12
sync_batch_normalization_12
conv2d_13
sync_batch_normalization_13
concatenate_2
conv2d_14
sync_batch_normalization_14
conv2d_15
sync_batch_normalization_15
csp_route_2
conv_bn_18
conv_bn_19
conv_bn_20
csp_connect_2
conv_bn_21
conv_bn_22
conv_bn_23
conv_bn_24
conv2d_18
sync_batch_normalization_18
conv2d_19
sync_batch_normalization_19
conv2d_20
sync_batch_normalization_20
conv2d_21
sync_batch_normalization_21
conv2d_22
sync_batch_normalization_22
concatenate_4
conv2d_23
sync_batch_normalization_23
conv2d_24
sync_batch_normalization_24
concatenate_1
conv_bn_7
conv_bn_8
conv2d_7
sync_batch_normalization_7
conv2d_8
sync_batch_normalization_8
concatenate_3
conv_bn_16
conv_bn_17
conv2d_16
sync_batch_normalization_16
conv2d_17
sync_batch_normalization_17
25 25
conv_bn_5 128 (1, 1) convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
conv_bn_6 128 (1, 1) convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
conv_bn 128 (3, 3) convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=1, pad=1, filters=128)
conv_bn_1 128 (1, 1) convCFG(_type='convolutional', w=64, h=64, c=128, size=1, stride=1, pad=0, filters=128)
conv_bn_2 128 (3, 3) convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=1, pad=1, filters=128)
conv_bn_3 128 (1, 1) convCFG(_type='convolutional', w=64, h=64, c=256, size=1, stride=1, pad=0, filters=128)
conv_bn_4 256 (3, 3) convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=1, pad=1, filters=256)
conv_bn_7 256 (3, 3) convCFG(_type='convolutional', w=64, h=64, c=128, size=3, stride=2, pad=1, filters=256)
conv_bn_8 256 (1, 1) convCFG(_type='convolutional', w=32, h=32, c=512, size=1, stride=1, pad=0, filters=256)
conv_bn_14 256 (1, 1) convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
conv_bn_15 256 (1, 1) convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
conv_bn_9 256 (3, 3) convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
conv_bn_10 256 (1, 1) convCFG(_type='convolutional', w=32, h=32, c=256, size=1, stride=1, pad=0, filters=256)
conv_bn_11 256 (3, 3) convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=256)
conv_bn_12 256 (1, 1) convCFG(_type='convolutional', w=32, h=32, c=512, size=1, stride=1, pad=0, filters=256)
conv_bn_13 512 (3, 3) convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=1, pad=1, filters=512)
conv_bn_16 512 (3, 3) convCFG(_type='convolutional', w=32, h=32, c=256, size=3, stride=2, pad=1, filters=512)
conv_bn_17 512 (1, 1) convCFG(_type='convolutional', w=16, h=16, c=1024, size=1, stride=1, pad=0, filters=512)
conv_bn_23 512 (1, 1) convCFG(_type='convolutional', w=16, h=16, c=512, size=1, stride=1, pad=0, filters=512)
conv_bn_24 512 (1, 1) convCFG(_type='convolutional', w=16, h=16, c=512, size=1, stride=1, pad=0, filters=512)
conv_bn_18 512 (3, 3) convCFG(_type='convolutional', w=16, h=16, c=512, size=3, stride=1, pad=1, filters=512)
conv_bn_19 512 (1, 1) convCFG(_type='convolutional', w=16, h=16, c=512, size=1, stride=1, pad=0, filters=512)
conv_bn_20 512 (3, 3) convCFG(_type='convolutional', w=16, h=16, c=512, size=3, stride=1, pad=1, filters=512)
conv_bn_21 512 (1, 1) convCFG(_type='convolutional', w=16, h=16, c=1024, size=1, stride=1, pad=0, filters=512)
conv_bn_22 1024 (3, 3) convCFG(_type='convolutional', w=16, h=16, c=512, size=3, stride=1, pad=1, filters=1024)
defaultdict(<class 'list'>, {'3': ['box_loss', 'class_loss', 'conf_loss', 'recall50', 'precision50', 'avg_iou', 'avg_obj'], '4': ['box_loss', 'class_loss', 'conf_loss', 'recall50', 'precision50', 'avg_iou', 'avg_obj'], '5': ['box_loss', 'class_loss', 'conf_loss', 'recall50', 'precision50', 'avg_iou', 'avg_obj'], 'global': ['total_loss', 'total_box', 'total_class', 'total_conf']})
[[12.0, 16.0], [19.0, 36.0], [40.0, 28.0], [36.0, 75.0], [76.0, 55.0], [72.0, 146.0], [142.0, 110.0], [192.0, 243.0], [459.0, 401.0]]
